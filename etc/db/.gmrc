/*
 * Graphile Migrate configuration.
 *
 * If you decide to commit this file (recommended) please ensure that it does
 * not contain any secrets (passwords, etc) - we recommend you manage these
 * with environmental variables instead.
 *
 * This file is in JSON5 format, in VSCode you can use "JSON with comments" as
 * the file format.
 */
{
  /*
   * pgSettings: key-value settings to be automatically loaded into PostgreSQL
   * before running migrations, using an equivalent of `SET LOCAL <key> TO
   * <value>`
   */
  "pgSettings": {
    // "search_path": "app_public,app_private,app_hidden,public",
  },

  /*
   * placeholders: substituted in SQL files when compiled/executed. Placeholder
   * keys should be prefixed with a colon and in all caps, like
   * `:COLON_PREFIXED_ALL_CAPS`. Placeholder values should be strings. They
   * will be replaced verbatim with NO ESCAPING AT ALL (this differs from how
   * psql handles placeholders) so should only be used with "safe" values. This
   * is useful for committing migrations where certain parameters can change
   * between environments (development, staging, production) but you wish to
   * use the same signed migration files for all.
   *
   * The special value "!ENV" can be used to indicate an environmental variable
   * of the same name should be used.
   *
   * Graphile Migrate automatically sets the `:DATABASE_NAME` and
   * `:DATABASE_OWNER` placeholders, and you should not attempt to override
   * these.
   */
  "placeholders": {
    // ":DATABASE_VISITOR": "!ENV", // Uses process.env.DATABASE_VISITOR
    // ":DB_NAME": "!ENV",  // use :DATABASE_NAME
    // ":DB_USER": "!ENV",  // :DATABASE_OWNER
    ":DB_PASS": "!ENV",
    ":JWT_AUD": "!ENV",
    ":JWT_SECRET": "!ENV",
    ":ROLE_API": "!ENV",
    ":ROLE_API_PASS": "!ENV",
    ":ROLE_ANON": "!ENV",
    ":ROLE_USER": "!ENV",
    ":ROLE_EXTERNAL": "!ENV",
    ":ROLE_ZEUS": "!ENV",
    // types
    ":VIRT_MONEY": "int",
    ":MONEY": "int",
    //
    ":CLICKHOUSE_TABLE": "!ENV",
  },

  /*
   * Actions allow you to run scripts or commands at certain points in the
   * migration lifecycle. SQL files are ran against the database directly.
   * "command" actions are ran with the following environmental variables set:
   *
   * - GM_DBURL: the PostgreSQL URL of the database being migrated
   * - GM_DBNAME: the name of the database from GM_DBURL
   * - GM_DBUSER: the user from GM_DBURL
   * - GM_SHADOW: set to 1 if the shadow database is being migrated, left unset
   *   otherwise
   *
   * If "shadow" is unspecified, the actions will run on events to both shadow
   * and normal databases. If "shadow" is true the action will only run on
   * actions to the shadow DB, and if false only on actions to the main DB.
   */

  /*
   * beforeReset: actions executed before a `graphile-migrate reset` command.
   */
  "beforeReset": [
    // // dump data
    // { "_": "command", "command": "./scripts/dump" },
  ],

  /*
   * afterReset: actions executed after a `graphile-migrate reset` command.
   */
  "afterReset": [
    "10-setup-roles.sql",
    "20-setup-schemas.sql",
    "30-lib.sql",
    "31-lib-jwt.sql",
    "40-setup-helpers.sql",
    "60-setup-accessors.sql",
    // "70-setup-postgrest.sql",
  ],

  /*
   * beforeAllMigrations: actions executed before any pending migrations are executed.
   */
  "beforeAllMigrations": [
  ],

  /*
   * afterAllMigrations: actions executed once all migrations are complete.
   */
  "afterAllMigrations": [
      { "_": "command", "shadow": true, "command": "if [ \"$IN_TESTS\" != \"1\" ]; then ./scripts/dump-schema; fi" },
  ],

  /*
   * beforeCurrent: actions executed before the current migration is run (i.e. in watch mode).
   */
  "beforeCurrent": [
  ],

  /*
   * afterCurrent: actions executed once the current migration has been evaluated (i.e. in watch mode).
   */
  "afterCurrent": [
    { "_": "command", "command": "./scripts/restore $(ls -1 backup/20*-data.sql | tail -1)" },
    // "seed.sql",
    { "_": "command", "command": "pg_prove -d $GM_DBURL --ext .sql -r $SYS-backend || true" },
    "80-after-current.sql",
  ],

  /*
   * blankMigrationContent: content to be written to the current migration
   * after commit. NOTE: this should only contain comments.
   */
  "blankMigrationContent": "--------------------------------------------------------------------------------\n--\n--------------------------------------------------------------------------------\n",

  /****************************************************************************\
  ***                                                                        ***
  ***         You probably don't want to edit anything below here.           ***
  ***                                                                        ***
  \****************************************************************************/

  /*
   * manageGraphileMigrateSchema: if you set this false, you must be sure to
   * keep the graphile_migrate schema up to date yourself. We recommend you
   * leave it at its default.
   */
  // "manageGraphileMigrateSchema": true,

  /*
   * migrationsFolder: path to the folder in which to store your migrations.
   */
  // migrationsFolder: "./migrations",

  "//generatedWith": "1.4.0"
}
