# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule WebProtocol.Data do

  use AyeSQL, runner: AyeSQLAuthorizedQueryRunner, repo: Repo
  import AyeSQLHelpers

  @doc """
  ClickHouse instances
  """
  definlinequeries """
  -- name: clickhouse_instance_fields
    id,
    code,
    name,
    uri,
    username,
    password,
    rev,
    created_at,
    updated_at

  -- name: clickhouse_instance_from
  app.clickhouse_instance ci

  -- name: clickhouse_instance_base
  select
    :clickhouse_instance_fields
  from
    :clickhouse_instance_from
  where
    true

  -- name: clickhouse_instance
  -- docs: clickhouse_instance
  with base as (:clickhouse_instance_base)
  select * from base where :_filter

  -- name: clickhouse_instance_list
  -- docs: clickhouse_instance_list
  with base as (:clickhouse_instance_base)
  select * from base where :_filter
  order by :order
  limit :limit offset :offset

  -- name: clickhouse_instance_count
  -- docs: clickhouse_instance_count
  with base as (:clickhouse_instance_base)
  select count(*) from base where :_filter

  -- name: clickhouse_instance_match_by_id
  (id = :id)
  -- name: clickhouse_instance_match_by_code
  (code = :code)
  -- name: clickhouse_instance_match_by_name
  (name = :name)
  -- name: clickhouse_instance_match_by_uri
  (uri = :uri)
  -- name: clickhouse_instance_match_by_username
  (username = :username)
  -- name: clickhouse_instance_match_by_password
  (password = :password)
  -- name: clickhouse_instance_match_by_rev
  (rev = :rev)
  -- name: clickhouse_instance_match_by_created_at
  (created_at = :created_at)
  -- name: clickhouse_instance_match_by_updated_at
  (updated_at = :updated_at)

  -- name: clickhouse_instance_filter_by_id
  coalesce(id = :id, true)
  -- name: clickhouse_instance_filter_by_code
  coalesce(code = :code, true)
  -- name: clickhouse_instance_filter_by_name
  coalesce(name = :name, true)
  -- name: clickhouse_instance_filter_by_uri
  coalesce(uri = :uri, true)
  -- name: clickhouse_instance_filter_by_username
  coalesce(username = :username, true)
  -- name: clickhouse_instance_filter_by_password
  coalesce(password = :password, true)
  -- name: clickhouse_instance_filter_by_rev
  coalesce(rev = :rev, true)
  -- name: clickhouse_instance_filter_by_created_at
  coalesce(created_at = :created_at, true)
  -- name: clickhouse_instance_filter_by_updated_at
  coalesce(updated_at = :updated_at, true)
  """

  @doc """
  Projects
  """
  definlinequeries """
  -- name: project_fields
    p.id as id,
    p.code as code,
    p.name as name,
    ci.id as clickhouse_instance_id,
    ci.code as clickhouse_code,
    ci.name as clickhouse_name,
    clickhouse_db,
    key_su,
    key_rw,
    description,
    schema,
    p.rev as rev,
    event_validation,
    preserve_db_columns,
    backup_mode,
    p.created_at as created_at,
    p.updated_at as updated_at

  -- name: project_from
  app.project p inner join app.clickhouse_instance ci on ci.id = p.clickhouse_instance_id

  -- name: project_base
  select
    :project_fields
  from
    :project_from
  where
    true

  -- name: project
  -- docs: project
  with base as (:project_base)
  select * from base where :_filter

  -- name: project_list
  -- docs: project_list
  with base as (:project_base)
  select * from base where :_filter
  order by :order
  limit :limit offset :offset

  -- name: project_count
  -- docs: project_count
  with base as (:project_base)
  select count(*) from base where :_filter

  -- name: project_match_by_id
  (id = :id)
  -- name: project_match_by_code
  (code = :code)
  -- name: project_match_by_name
  (name = :name)
  -- name: project_match_by_clickhouse_instance_id
  (clickhouse_instance_id = :clickhouse_instance_id)
  -- name: project_match_by_clickhouse_code
  (clickhouse_code = :clickhouse_code)
  -- name: project_match_by_clickhouse_name
  (clickhouse_name = :clickhouse_name)
  -- name: project_match_by_clickhouse_db
  (clickhouse_db = :clickhouse_db)
  -- name: project_match_by_key_su
  (key_su = :key_su)
  -- name: project_match_by_key_rw
  (key_rw = :key_rw)
  -- name: project_match_by_description
  (description = :description)
  -- name: project_match_by_schema
  (schema = :schema)
  -- name: project_match_by_rev
  (rev = :rev)
  -- name: project_match_by_event_validation
  (event_validation = :event_validation)
  -- name: project_match_by_preserve_db_columns
  (preserve_db_columns = :preserve_db_columns)
  -- name: project_match_by_backup_mode
  (backup_mode = :backup_mode)
  -- name: project_match_by_created_at
  (created_at = :created_at)
  -- name: project_match_by_updated_at
  (updated_at = :updated_at)

  -- name: project_filter_by_id
  coalesce(id = :id, true)
  -- name: project_filter_by_code
  coalesce(code = :code, true)
  -- name: project_filter_by_name
  coalesce(name = :name, true)
  -- name: project_filter_by_clickhouse_instance_id
  coalesce(clickhouse_instance_id = :clickhouse_instance_id, true)
  -- name: project_filter_by_clickhouse_code
  coalesce(clickhouse_code = :clickhouse_code, true)
  -- name: project_filter_by_clickhouse_name
  coalesce(clickhouse_name = :clickhouse_name, true)
  -- name: project_filter_by_clickhouse_db
  coalesce(clickhouse_db = :clickhouse_db, true)
  -- name: project_filter_by_key_su
  coalesce(key_su = :key_su, true)
  -- name: project_filter_by_key_rw
  coalesce(key_rw = :key_rw, true)
  -- name: project_filter_by_description
  coalesce(description = :description, true)
  -- name: project_filter_by_schema
  coalesce(schema = :schema, true)
  -- name: project_filter_by_rev
  coalesce(rev = :rev, true)
  -- name: project_filter_by_event_validation
  coalesce(event_validation = :event_validation, true)
  -- name: project_filter_by_preserve_db_columns
  coalesce(preserve_db_columns = :preserve_db_columns, true)
  -- name: project_filter_by_backup_mode
  coalesce(backup_mode = :backup_mode, true)
  -- name: project_filter_by_created_at
  coalesce(created_at = :created_at, true)
  -- name: project_filter_by_updated_at
  coalesce(updated_at = :updated_at, true)
  """

  definlinequeries """
  -- name: schema_migration_fields
    psm.id as id,
    project_id,
    p.code as project_code,
    previous_schema,
    psm.schema as schema,
    schema_diff,
    psm.created_at as created_at

  -- name: schema_migration_from
  app.project_schema_migration psm inner join app.project p on p.id = psm.project_id

  -- name: schema_migration_base
  select
    :schema_migration_fields
  from
    :schema_migration_from
  where
    true

  -- name: schema_migration
  -- docs: schema_migration
  with base as (:schema_migration_base)
  select * from base where :_filter

  -- name: schema_migration_list
  -- docs: schema_migration_list
  with base as (:schema_migration_base)
  select * from base where :_filter
  order by :order
  limit :limit offset :offset

  -- name: schema_migration_count
  -- docs: schema_migration_count
  with base as (:schema_migration_base)
  select count(*) from base where :_filter

  -- name: schema_migration_order_by_id_asc
  1 asc
  -- name: schema_migration_order_by_id_desc
  1 desc nulls last
  -- name: schema_migration_order_by_created_at_asc
  7 asc
  -- name: schema_migration_order_by_created_at_desc
  7 desc nulls last

  -- name: schema_migration_match_by_id
  (id = :id)
  -- name: schema_migration_match_by_project_id
  (project_id = :project_id)
  -- name: schema_migration_match_by_project_code
  (project_code = :project_code)
  -- name: schema_migration_match_by_previous_schema
  (previous_schema = :previous_schema)
  -- name: schema_migration_match_by_schema
  (schema = :schema)
  -- name: schema_migration_match_by_schema_diff
  (schema_diff = :schema_diff)
  -- name: schema_migration_match_by_created_at
  (created_at = :created_at)

  -- name: schema_migration_filter_by_id
  coalesce(id = :id, true)
  -- name: schema_migration_filter_by_project_id
  coalesce(project_id = :project_id, true)
  -- name: schema_migration_filter_by_project_code
  coalesce(project_code = :project_code, true)
  -- name: schema_migration_filter_by_previous_schema
  coalesce(previous_schema = :previous_schema, true)
  -- name: schema_migration_filter_by_schema
  coalesce(schema = :schema, true)
  -- name: schema_migration_filter_by_schema_diff
  coalesce(schema_diff = :schema_diff, true)
  -- name: schema_migration_filter_by_created_at
  coalesce(created_at = :created_at, true)
  """

  @doc """
  Get ClickHouse instances
  """
  definlinequeries """
  -- name: _get_clickhouse_instances
  with base as (:clickhouse_instance_base)
  select * from base where (true)
  -- name: _get_clickhouse_instances_count
  with base as (:clickhouse_instance_base)
  select count(*) from base where (true)
  """
  def get_clickhouse_instances!(params, opts \\ [])
  def get_clickhouse_instances!(%{order_by: order_by, order_dir: order_dir, limit: _limit, offset: _offset} = params, opts) when is_atom(order_by) and is_atom(order_dir) and is_list(opts) do
    items = _get_clickhouse_instances!(Map.merge(%{order: nil}, params), opts ++ [into: WebProtocol.ClickhouseInstance])
    %DataProtocol.Collection{items: items}
  end

  @doc """
  Get a ClickHouse instance
  """
  definlinequeries """
  -- name: _get_clickhouse_instance
  with base as (:clickhouse_instance_base)
  select * from base where (coalesce(id = :id, false) or coalesce(code = :code, false))
  """
  def get_clickhouse_instance!(params, opts \\ [])
  def get_clickhouse_instance!(%{} = params, opts) when is_list(opts) do
    _get_clickhouse_instance!(params, opts ++ [into: WebProtocol.ClickhouseInstance]) |> one!()
  end

  @doc """
  Get projects
  """
  definlinequeries """
  -- name: _get_projects
  with base as (:project_base)
  select * from base where (true)
  -- name: _get_projects_count
  with base as (:project_base)
  select count(*) from base where (true)
  """
  def get_projects!(params, opts \\ [])
  def get_projects!(%{order_by: order_by, order_dir: order_dir, limit: _limit, offset: _offset} = params, opts) when is_atom(order_by) and is_atom(order_dir) and is_list(opts) do
    items = _get_projects!(Map.merge(%{order: nil}, params), opts ++ [into: WebProtocol.Project])
    %DataProtocol.Collection{items: items}
  end

  @doc """
  Get a project
  """
  definlinequeries """
  -- name: _get_project
  with base as (:project_base)
  select * from base where (coalesce(id = :id, false) or coalesce(code = :code, false))
  """
  def get_project!(params, opts \\ [])
  def get_project!(%{} = params, opts) when is_list(opts) do
    _get_project!(params, opts ++ [into: WebProtocol.Project]) |> one!()
  end

  @doc """
  Fetch migrations collection slice
  """
  definlinequeries """
  -- name: _fetch_schema_migrations
  with base as (:schema_migration_base)
  select * from base where ((coalesce(project_id = :id, false) or coalesce(project_code = :code, false)))
  order by :order limit :limit offset :offset
  -- name: _fetch_schema_migrations_count
  with base as (:schema_migration_base)
  select count(*) from base where ((coalesce(project_id = :id, false) or coalesce(project_code = :code, false)))
  """
  def fetch_schema_migrations!(params, opts \\ [])
  def fetch_schema_migrations!(%{order_by: order_by, order_dir: order_dir, limit: _limit, offset: _offset} = params, opts) when is_atom(order_by) and is_atom(order_dir) and is_list(opts) do
    items = _fetch_schema_migrations!(Map.merge(%{order: order_by && String.to_existing_atom("schema_migration_order_by_#{order_by}_#{order_dir}")}, params), opts ++ [into: WebProtocol.SchemaMigration])
    total = _fetch_schema_migrations_count!(params, opts |> Keyword.delete(:into)) |> count!()
    %DataProtocol.CollectionSlice{items: items, total: total}
  end

  @doc """
  Fetch a migration
  """
  definlinequeries """
  -- name: _fetch_schema_migration
  with base as (:schema_migration_base)
  select * from base where ((coalesce(project_id = :id, false) or coalesce(project_code = :code, false)) and id = :migration_id)
  """
  def fetch_schema_migration!(params, opts \\ [])
  def fetch_schema_migration!(%{} = params, opts) when is_list(opts) do
    _fetch_schema_migration!(params, opts ++ [into: WebProtocol.SchemaMigration]) |> one!()
  end

end
