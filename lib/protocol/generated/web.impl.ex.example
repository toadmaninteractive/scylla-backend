# @author Igor compiler
# @doc Compiler version: igorc 2.1.4
# DO NOT EDIT THIS FILE - it is machine generated

defmodule IngestProtocol.ScyllaIngestionService.Impl do

  require Scylla.ProjectId

  @behaviour IngestProtocol.ScyllaIngestionService

  # ----------------------------------------------------------------------------

  @doc """
  Push events to project database
  """
  @spec send_events(
    project_id_or_code :: TypesProtocol.project_id(),
    api_key :: String.t() | nil,
    request_content :: IngestProtocol.Envelope.t(),
    current_user :: Map.t() | nil
  ) :: IngestProtocol.IngestorResponse.t() | no_return
  @impl IngestProtocol.ScyllaIngestionService
  def send_events(
    project_id_or_code,
    api_key,
    request_content,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(project_id_or_code) and
    (is_binary(api_key) or api_key === nil) and
    is_struct(request_content, IngestProtocol.Envelope) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'IngestProtocol.ScyllaIngestionService.SendEvents' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get project schema
  """
  @spec get_schema(
    project_id_or_code :: TypesProtocol.project_id(),
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: IngestProtocol.OldSchemaResponse.t() | no_return
  @impl IngestProtocol.ScyllaIngestionService
  def get_schema(
    project_id_or_code,
    api_key,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(project_id_or_code) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'IngestProtocol.ScyllaIngestionService.GetSchema' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Update project schema
  """
  @spec update_schema(
    project_id_or_code :: TypesProtocol.project_id(),
    force :: boolean,
    api_key :: String.t() | nil,
    request_content :: IgorSchema.Schema.t(),
    current_user :: Map.t() | nil
  ) :: any | no_return
  @impl IngestProtocol.ScyllaIngestionService
  def update_schema(
    project_id_or_code,
    force,
    api_key,
    request_content,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(project_id_or_code) and
    is_boolean(force) and
    (is_binary(api_key) or api_key === nil) and
    is_struct(request_content, IgorSchema.Schema) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'IngestProtocol.ScyllaIngestionService.UpdateSchema' not yet implemented"
  end

end

defmodule WebProtocol.ScyllaAuthService.Impl do

  @moduledoc """
  Scylla Authentication Service
  """

  @behaviour WebProtocol.ScyllaAuthService

  # ----------------------------------------------------------------------------

  @doc """
  TODO: annotate WebProtocol.ScyllaAuthService.Login
  """
  @spec login(
    conn :: Plug.Conn.t(),
    request_content :: WebProtocol.LoginRequest.t(),
    current_user :: Map.t() | nil
  ) :: {Plug.Conn.t(), WebProtocol.UserProfile.t()} | no_return
  @impl WebProtocol.ScyllaAuthService
  def login(
    conn,
    request_content,
    current_user
  ) when
    is_map(conn) and
    is_struct(request_content, WebProtocol.LoginRequest) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaAuthService.Login' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  TODO: annotate WebProtocol.ScyllaAuthService.Logout
  """
  @spec logout(
    conn :: Plug.Conn.t(),
    current_user :: Map.t() | nil
  ) :: Plug.Conn.t() | no_return
  @impl WebProtocol.ScyllaAuthService
  def logout(
    conn,
    current_user
  ) when
    is_map(conn) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaAuthService.Logout' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  TODO: annotate WebProtocol.ScyllaAuthService.GetMyProfile
  """
  @spec get_my_profile(
    current_user :: Map.t() | nil
  ) :: WebProtocol.UserProfile.t() | no_return
  @impl WebProtocol.ScyllaAuthService
  def get_my_profile(
    current_user
  ) when
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaAuthService.GetMyProfile' not yet implemented"
  end

end

defmodule WebProtocol.ScyllaManagementService.Impl do

  @moduledoc """
  Scylla Management Service
  """
  require Scylla.ClickhouseInstanceId
  require Scylla.ProjectId
  require WebProtocol.SchemaMigrationOrderBy
  require DataProtocol.OrderDirection
  require WebProtocol.BackupFieldsOrderBy

  @behaviour WebProtocol.ScyllaManagementService

  # ----------------------------------------------------------------------------

  @doc """
  Get ClickHouse instances
  """
  @spec get_clickhouse_instances(
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: DataProtocol.Collection.t(WebProtocol.ClickhouseInstance.t()) | no_return
  @impl WebProtocol.ScyllaManagementService
  def get_clickhouse_instances(
    api_key,
    current_user
  ) when
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.GetClickhouseInstances' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Create a ClickHouse instance
  """
  @spec create_clickhouse_instance(
    api_key :: String.t() | nil,
    request_content :: WebProtocol.CreateClickhouseInstanceRequest.t(),
    current_user :: Map.t() | nil
  ) :: WebProtocol.ClickhouseInstance.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def create_clickhouse_instance(
    api_key,
    request_content,
    current_user
  ) when
    (is_binary(api_key) or api_key === nil) and
    is_struct(request_content, WebProtocol.CreateClickhouseInstanceRequest) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.CreateClickhouseInstance' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get a ClickHouse instance
  """
  @spec get_clickhouse_instance(
    id_or_code :: TypesProtocol.clickhouse_instance_id(),
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: WebProtocol.ClickhouseInstance.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def get_clickhouse_instance(
    id_or_code,
    api_key,
    current_user
  ) when
    Scylla.ClickhouseInstanceId.is_clickhouse_instance_id(id_or_code) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.GetClickhouseInstance' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Update a ClickHouse instance
  """
  @spec update_clickhouse_instance(
    id_or_code :: TypesProtocol.clickhouse_instance_id(),
    api_key :: String.t() | nil,
    request_content :: WebProtocol.UpdateClickhouseInstanceRequest.t(),
    current_user :: Map.t() | nil
  ) :: WebProtocol.ClickhouseInstance.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def update_clickhouse_instance(
    id_or_code,
    api_key,
    request_content,
    current_user
  ) when
    Scylla.ClickhouseInstanceId.is_clickhouse_instance_id(id_or_code) and
    (is_binary(api_key) or api_key === nil) and
    is_map(request_content) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.UpdateClickhouseInstance' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Delete a ClickHouse instance
  """
  @spec delete_clickhouse_instance(
    id_or_code :: TypesProtocol.clickhouse_instance_id(),
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: any | no_return
  @impl WebProtocol.ScyllaManagementService
  def delete_clickhouse_instance(
    id_or_code,
    api_key,
    current_user
  ) when
    Scylla.ClickhouseInstanceId.is_clickhouse_instance_id(id_or_code) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.DeleteClickhouseInstance' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get projects
  """
  @spec get_projects(
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: DataProtocol.Collection.t(WebProtocol.Project.t()) | no_return
  @impl WebProtocol.ScyllaManagementService
  def get_projects(
    api_key,
    current_user
  ) when
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.GetProjects' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Create a project
  """
  @spec create_project(
    keep_db :: boolean,
    api_key :: String.t() | nil,
    request_content :: WebProtocol.CreateProjectRequest.t(),
    current_user :: Map.t() | nil
  ) :: WebProtocol.Project.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def create_project(
    keep_db,
    api_key,
    request_content,
    current_user
  ) when
    is_boolean(keep_db) and
    (is_binary(api_key) or api_key === nil) and
    is_struct(request_content, WebProtocol.CreateProjectRequest) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.CreateProject' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Get a project
  """
  @spec get_project(
    id_or_code :: TypesProtocol.project_id(),
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: WebProtocol.Project.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def get_project(
    id_or_code,
    api_key,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.GetProject' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Update a project
  """
  @spec update_project(
    id_or_code :: TypesProtocol.project_id(),
    keep_db :: boolean,
    api_key :: String.t() | nil,
    request_content :: WebProtocol.UpdateProjectRequest.t(),
    current_user :: Map.t() | nil
  ) :: WebProtocol.Project.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def update_project(
    id_or_code,
    keep_db,
    api_key,
    request_content,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    is_boolean(keep_db) and
    (is_binary(api_key) or api_key === nil) and
    is_map(request_content) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.UpdateProject' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Delete a project
  """
  @spec delete_project(
    id_or_code :: TypesProtocol.project_id(),
    keep_db :: boolean,
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: any | no_return
  @impl WebProtocol.ScyllaManagementService
  def delete_project(
    id_or_code,
    keep_db,
    api_key,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    is_boolean(keep_db) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.DeleteProject' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Regenerate project key
  """
  @spec regenerate_project_key(
    id_or_code :: TypesProtocol.project_id(),
    key :: atom,
    api_key :: String.t() | nil,
    request_content :: DataProtocol.Empty.t(),
    current_user :: Map.t() | nil
  ) :: WebProtocol.Project.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def regenerate_project_key(
    id_or_code,
    key,
    api_key,
    request_content,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    is_atom(key) and
    (is_binary(api_key) or api_key === nil) and
    is_struct(request_content, DataProtocol.Empty) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.RegenerateProjectKey' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Fetch last N project events
  """
  @spec fetch_project_events(
    id_or_code :: TypesProtocol.project_id(),
    count :: integer,
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: [Igor.Json.json()] | no_return
  @impl WebProtocol.ScyllaManagementService
  def fetch_project_events(
    id_or_code,
    count,
    api_key,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    is_integer(count) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.FetchProjectEvents' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Fetch migrations collection slice
  """
  @spec fetch_schema_migrations(
    id_or_code :: TypesProtocol.project_id(),
    order_by :: WebProtocol.SchemaMigrationOrderBy.t(),
    order_dir :: DataProtocol.OrderDirection.t(),
    offset :: non_neg_integer,
    limit :: non_neg_integer,
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: DataProtocol.CollectionSlice.t(WebProtocol.SchemaMigration.t()) | no_return
  @impl WebProtocol.ScyllaManagementService
  def fetch_schema_migrations(
    id_or_code,
    order_by,
    order_dir,
    offset,
    limit,
    api_key,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    WebProtocol.SchemaMigrationOrderBy.is_schema_migration_order_by(order_by) and
    DataProtocol.OrderDirection.is_order_direction(order_dir) and
    is_integer(offset) and
    is_integer(limit) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.FetchSchemaMigrations' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Fetch a migration
  """
  @spec fetch_schema_migration(
    id_or_code :: TypesProtocol.project_id(),
    migration_id :: integer,
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: WebProtocol.SchemaMigration.t() | no_return
  @impl WebProtocol.ScyllaManagementService
  def fetch_schema_migration(
    id_or_code,
    migration_id,
    api_key,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    is_integer(migration_id) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.FetchSchemaMigration' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Fetch list of backup fields
  """
  @spec get_backup_fields(
    id_or_code :: TypesProtocol.project_id(),
    order_by :: WebProtocol.BackupFieldsOrderBy.t(),
    order_dir :: DataProtocol.OrderDirection.t(),
    offset :: non_neg_integer,
    limit :: non_neg_integer,
    api_key :: String.t() | nil,
    current_user :: Map.t() | nil
  ) :: DataProtocol.CollectionSlice.t(String.t()) | no_return
  @impl WebProtocol.ScyllaManagementService
  def get_backup_fields(
    id_or_code,
    order_by,
    order_dir,
    offset,
    limit,
    api_key,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    WebProtocol.BackupFieldsOrderBy.is_backup_fields_order_by(order_by) and
    DataProtocol.OrderDirection.is_order_direction(order_dir) and
    is_integer(offset) and
    is_integer(limit) and
    (is_binary(api_key) or api_key === nil) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.GetBackupFields' not yet implemented"
  end

  # ----------------------------------------------------------------------------

  @doc """
  Drop backup fields by name
  """
  @spec drop_backup_fields(
    id_or_code :: TypesProtocol.project_id(),
    api_key :: String.t() | nil,
    request_content :: [String.t()],
    current_user :: Map.t() | nil
  ) :: any | no_return
  @impl WebProtocol.ScyllaManagementService
  def drop_backup_fields(
    id_or_code,
    api_key,
    request_content,
    current_user
  ) when
    Scylla.ProjectId.is_project_id(id_or_code) and
    (is_binary(api_key) or api_key === nil) and
    is_list(request_content) and
    (is_map(current_user) or current_user === nil)
  do
    raise "Resource 'WebProtocol.ScyllaManagementService.DropBackupFields' not yet implemented"
  end

end
